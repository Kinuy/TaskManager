name: Mac Release

on:
  push:
    branches: 
      - 'main'
      - 'continuous-integration'
  pull_request:
    branches: 
      - 'main'
      - 'continuous-integration'

env:
  SOURCE_DIR:   ${{ github.workspace }}  
  QT_VERSION: 6.5.0
  CMAKE_VERSION: 3.21
  ARTIFACT:     task-manager-macos.zip

jobs:
  build:
    runs-on:  macos-latest

    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: (2) Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      # - name: (3) Install Qt via Homebrew
      #   run: |
      #     brew install qt@6
      #     echo "Qt6_DIR=$(brew --prefix qt@6)/lib/cmake/Qt6" >> $GITHUB_ENV

      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '6.9.0'
          host: 'mac'
          target: 'desktop'
          arch: 'clang_64'
          tools: 'tools_cmake'

      - name: (4) Create build directory
        run: mkdir -p ${{ runner.temp }}/build


      - name: (5) Configure CMake
        working-directory: ${{ runner.temp }}/build
        run: |
          cmake ${{ env.SOURCE_DIR }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}" \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
            -DCMAKE_MACOSX_RPATH=ON \
            -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks;${{ env.Qt6_DIR }}/lib"

      - name: (6) Build
        working-directory: ${{ runner.temp }}/build
        run: cmake --build . --parallel 2

      # - name: (7) Create DMG
      #   working-directory: ${{ runner.temp }}/build
      #   run: |
      #     # Find the app bundle
      #     APP_PATH=$(find . -name "*.app" -type d | head -1)
      #     if [ -z "$APP_PATH" ]; then
      #       echo "No .app bundle found"
      #       exit 1
      #     fi
      #     echo "Found app: $APP_PATH"
          
      #     # Get the directory containing the .app and the app name
      #     APP_DIR=$(dirname "$APP_PATH")
      #     APP_NAME=$(basename "$APP_PATH")
          
      #     # cd into the directory containing the .app (as the advice suggests)
      #     cd "$APP_DIR"
          
      #     # Use macdeployqt from the aqt Qt installation instead of brew
      #     "${{ env.Qt6_DIR }}/bin/macdeployqt" "$APP_NAME" \
      #       -qmldir="${{ env.SOURCE_DIR }}" \
      #       -dmg \
      #       -verbose=3

      - name: (7) Create DMG - Alternative approach
        working-directory: ${{ runner.temp }}/build
        run: |
          # Find the app bundle
          APP_PATH=$(find . -name "*.app" -type d | head -1)
          APP_NAME=$(basename "$APP_PATH")
          
          # Move to shorter path to avoid long path issues
          cp -R "$APP_PATH" /tmp/
          cd /tmp
          
          # Try macdeployqt from shorter path
          "${{ env.Qt6_DIR }}/bin/macdeployqt" "$APP_NAME" \
            -qmldir="${{ env.SOURCE_DIR }}" \
            -dmg \
            -verbose=1
          
          # Move DMG back to build directory
          mv *.dmg "${{ runner.temp }}/build/" || echo "No DMG created"

      - name: (8) Zip build artifacts
        working-directory: ${{ runner.temp }}/build
        run:  |
              zip -r ../task-manager-macos.zip *.app *.dmg
              
      - name: (9) Save build artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}